package chatapp;
// import stream classes
import java.io.DataInputStream;
import java.io.DataOutputStream;
// import socket classes for RPC's
import java.net.Socket;

/**
 *
 * @author bAe, Des, Arni, Shra
 */
public class ClientForm extends javax.swing.JFrame {

    /**
     * Creates new form ClientForm
     */
    // declaring private variables
    // static so can be accessible inside static main 
    // make private & assign default values
    static Socket s;
    static DataInputStream dis;
    static DataOutputStream dos;
    // Default Cstr
    public ClientForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msgArea = new javax.swing.JTextArea();
        msgText = new javax.swing.JTextField();
        buttonSend = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client");

        msgArea.setColumns(20);
        msgArea.setRows(5);
        jScrollPane1.setViewportView(msgArea);

        msgText.setForeground(new java.awt.Color(153, 153, 153));
        msgText.setText("Type a message");

        buttonSend.setText("Send");
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msgText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSend)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSend)
                    .addComponent(msgText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Send messages on clicking the send button
    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        // create container to hold messages
        String msgOut = "";
        try {
            // get messages from the text box when button is clicked
            // trim white spaces from string gained
            // store message in container
            msgOut = msgText.getText().trim();
            // Hardcode senders name
            // concat message stored in container
            // append this sum to message area's display
            msgArea.setText(msgArea.getText().trim() +"\nClient: " +msgOut);
            // write this sum to the output stream
            dos.writeUTF("Client: " +msgOut); // catch IOException
        } catch (Exception e){
            // handle exception
        }
    }//GEN-LAST:event_buttonSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientForm().setVisible(true);
            }
        });
        
        // Display messages from the input stream on the text area
        // define message container
        String msgIn = "";
        try {
            // Send socket establishment request
            s = new Socket("localhost", 1201); // catch UnkownHostException
            // create input stream
            dis = new DataInputStream(s.getInputStream()); // catch IOException
            // create output stream
            dos = new DataOutputStream(s.getOutputStream());
            // check what message container holds till exit is seen
            while(!msgIn.equals("exit")) {
                // update message container to contain values in the input stream
                msgIn = dis.readUTF(); // catch IOException
                // Update text area to contain currently displayed values &
                // incoming values from input stream
                // Following order of precedence
                // get the messages currently in text area
                // trim whitespaces in the messages
                // add a new line
                // add the message in container to trimmed message
                // place the combined values on the message area's display
                msgArea.setText(msgArea.getText().trim() +"\n" +msgIn);
            }
        } catch (Exception e) {
            // Print stream used to handle error text
            // prints to the standard error
            // can be redirected to a file (Changing streams used)
            // OutputStream output = new FileOutputStream("c:\\filepath\\log.txt");
            // PrintStream printOut = new PrintStream(output);
            // System.setOut(printOut);
            System.err.println("Fatal Connection Error!");
            // Diagnose exception 
            // pinpoint the exact line in which the method raised the exception
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSend;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msgArea;
    private javax.swing.JTextField msgText;
    // End of variables declaration//GEN-END:variables
}
